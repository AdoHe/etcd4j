// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: etcd.proto

package com.xqbase.etcd4j;

/**
 * Protobuf type {@code etcd4j.WatchCreateRequest}
 */
public  final class WatchCreateRequest extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:etcd4j.WatchCreateRequest)
    WatchCreateRequestOrBuilder {
  // Use WatchCreateRequest.newBuilder() to construct.
  private WatchCreateRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private WatchCreateRequest() {
    key_ = com.google.protobuf.ByteString.EMPTY;
    rangeEnd_ = com.google.protobuf.ByteString.EMPTY;
    startRevision_ = 0L;
    progressNotify_ = false;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private WatchCreateRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {

            key_ = input.readBytes();
            break;
          }
          case 18: {

            rangeEnd_ = input.readBytes();
            break;
          }
          case 24: {

            startRevision_ = input.readInt64();
            break;
          }
          case 32: {

            progressNotify_ = input.readBool();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw new RuntimeException(e.setUnfinishedMessage(this));
    } catch (java.io.IOException e) {
      throw new RuntimeException(
          new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this));
    } finally {
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.xqbase.etcd4j.EtcdJavaProto.internal_static_etcd4j_WatchCreateRequest_descriptor;
  }

  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.xqbase.etcd4j.EtcdJavaProto.internal_static_etcd4j_WatchCreateRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.xqbase.etcd4j.WatchCreateRequest.class, com.xqbase.etcd4j.WatchCreateRequest.Builder.class);
  }

  public static final int KEY_FIELD_NUMBER = 1;
  private com.google.protobuf.ByteString key_;
  /**
   * <code>optional bytes key = 1;</code>
   *
   * <pre>
   * the key to be watched
   * </pre>
   */
  public com.google.protobuf.ByteString getKey() {
    return key_;
  }

  public static final int RANGE_END_FIELD_NUMBER = 2;
  private com.google.protobuf.ByteString rangeEnd_;
  /**
   * <code>optional bytes range_end = 2;</code>
   *
   * <pre>
   * if the range_end is given, keys in [key, range_end) are watched
   * NOTE: only range_end == prefixEnd(key) is accepted now
   * </pre>
   */
  public com.google.protobuf.ByteString getRangeEnd() {
    return rangeEnd_;
  }

  public static final int START_REVISION_FIELD_NUMBER = 3;
  private long startRevision_;
  /**
   * <code>optional int64 start_revision = 3;</code>
   *
   * <pre>
   * start_revision is an optional revision (including) to watch from. No start_revision is "now".
   * </pre>
   */
  public long getStartRevision() {
    return startRevision_;
  }

  public static final int PROGRESS_NOTIFY_FIELD_NUMBER = 4;
  private boolean progressNotify_;
  /**
   * <code>optional bool progress_notify = 4;</code>
   *
   * <pre>
   * if progress_notify is set, etcd server sends WatchResponse with empty events to the
   * created watcher when there are no recent events. It is useful when clients want always to be
   * able to recover a disconnected watcher from a recent known revision.
   * etcdsever can decide how long it should send a notification based on current load.
   * </pre>
   */
  public boolean getProgressNotify() {
    return progressNotify_;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!key_.isEmpty()) {
      output.writeBytes(1, key_);
    }
    if (!rangeEnd_.isEmpty()) {
      output.writeBytes(2, rangeEnd_);
    }
    if (startRevision_ != 0L) {
      output.writeInt64(3, startRevision_);
    }
    if (progressNotify_ != false) {
      output.writeBool(4, progressNotify_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!key_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(1, key_);
    }
    if (!rangeEnd_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(2, rangeEnd_);
    }
    if (startRevision_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(3, startRevision_);
    }
    if (progressNotify_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(4, progressNotify_);
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  public static com.xqbase.etcd4j.WatchCreateRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.xqbase.etcd4j.WatchCreateRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.xqbase.etcd4j.WatchCreateRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.xqbase.etcd4j.WatchCreateRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.xqbase.etcd4j.WatchCreateRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static com.xqbase.etcd4j.WatchCreateRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static com.xqbase.etcd4j.WatchCreateRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static com.xqbase.etcd4j.WatchCreateRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static com.xqbase.etcd4j.WatchCreateRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static com.xqbase.etcd4j.WatchCreateRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.xqbase.etcd4j.WatchCreateRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code etcd4j.WatchCreateRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:etcd4j.WatchCreateRequest)
      com.xqbase.etcd4j.WatchCreateRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.xqbase.etcd4j.EtcdJavaProto.internal_static_etcd4j_WatchCreateRequest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.xqbase.etcd4j.EtcdJavaProto.internal_static_etcd4j_WatchCreateRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.xqbase.etcd4j.WatchCreateRequest.class, com.xqbase.etcd4j.WatchCreateRequest.Builder.class);
    }

    // Construct using com.xqbase.etcd4j.WatchCreateRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      key_ = com.google.protobuf.ByteString.EMPTY;

      rangeEnd_ = com.google.protobuf.ByteString.EMPTY;

      startRevision_ = 0L;

      progressNotify_ = false;

      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.xqbase.etcd4j.EtcdJavaProto.internal_static_etcd4j_WatchCreateRequest_descriptor;
    }

    public com.xqbase.etcd4j.WatchCreateRequest getDefaultInstanceForType() {
      return com.xqbase.etcd4j.WatchCreateRequest.getDefaultInstance();
    }

    public com.xqbase.etcd4j.WatchCreateRequest build() {
      com.xqbase.etcd4j.WatchCreateRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.xqbase.etcd4j.WatchCreateRequest buildPartial() {
      com.xqbase.etcd4j.WatchCreateRequest result = new com.xqbase.etcd4j.WatchCreateRequest(this);
      result.key_ = key_;
      result.rangeEnd_ = rangeEnd_;
      result.startRevision_ = startRevision_;
      result.progressNotify_ = progressNotify_;
      onBuilt();
      return result;
    }

    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.xqbase.etcd4j.WatchCreateRequest) {
        return mergeFrom((com.xqbase.etcd4j.WatchCreateRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.xqbase.etcd4j.WatchCreateRequest other) {
      if (other == com.xqbase.etcd4j.WatchCreateRequest.getDefaultInstance()) return this;
      if (other.getKey() != com.google.protobuf.ByteString.EMPTY) {
        setKey(other.getKey());
      }
      if (other.getRangeEnd() != com.google.protobuf.ByteString.EMPTY) {
        setRangeEnd(other.getRangeEnd());
      }
      if (other.getStartRevision() != 0L) {
        setStartRevision(other.getStartRevision());
      }
      if (other.getProgressNotify() != false) {
        setProgressNotify(other.getProgressNotify());
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.xqbase.etcd4j.WatchCreateRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.xqbase.etcd4j.WatchCreateRequest) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private com.google.protobuf.ByteString key_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <code>optional bytes key = 1;</code>
     *
     * <pre>
     * the key to be watched
     * </pre>
     */
    public com.google.protobuf.ByteString getKey() {
      return key_;
    }
    /**
     * <code>optional bytes key = 1;</code>
     *
     * <pre>
     * the key to be watched
     * </pre>
     */
    public Builder setKey(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      key_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bytes key = 1;</code>
     *
     * <pre>
     * the key to be watched
     * </pre>
     */
    public Builder clearKey() {
      
      key_ = getDefaultInstance().getKey();
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString rangeEnd_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <code>optional bytes range_end = 2;</code>
     *
     * <pre>
     * if the range_end is given, keys in [key, range_end) are watched
     * NOTE: only range_end == prefixEnd(key) is accepted now
     * </pre>
     */
    public com.google.protobuf.ByteString getRangeEnd() {
      return rangeEnd_;
    }
    /**
     * <code>optional bytes range_end = 2;</code>
     *
     * <pre>
     * if the range_end is given, keys in [key, range_end) are watched
     * NOTE: only range_end == prefixEnd(key) is accepted now
     * </pre>
     */
    public Builder setRangeEnd(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      rangeEnd_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bytes range_end = 2;</code>
     *
     * <pre>
     * if the range_end is given, keys in [key, range_end) are watched
     * NOTE: only range_end == prefixEnd(key) is accepted now
     * </pre>
     */
    public Builder clearRangeEnd() {
      
      rangeEnd_ = getDefaultInstance().getRangeEnd();
      onChanged();
      return this;
    }

    private long startRevision_ ;
    /**
     * <code>optional int64 start_revision = 3;</code>
     *
     * <pre>
     * start_revision is an optional revision (including) to watch from. No start_revision is "now".
     * </pre>
     */
    public long getStartRevision() {
      return startRevision_;
    }
    /**
     * <code>optional int64 start_revision = 3;</code>
     *
     * <pre>
     * start_revision is an optional revision (including) to watch from. No start_revision is "now".
     * </pre>
     */
    public Builder setStartRevision(long value) {
      
      startRevision_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int64 start_revision = 3;</code>
     *
     * <pre>
     * start_revision is an optional revision (including) to watch from. No start_revision is "now".
     * </pre>
     */
    public Builder clearStartRevision() {
      
      startRevision_ = 0L;
      onChanged();
      return this;
    }

    private boolean progressNotify_ ;
    /**
     * <code>optional bool progress_notify = 4;</code>
     *
     * <pre>
     * if progress_notify is set, etcd server sends WatchResponse with empty events to the
     * created watcher when there are no recent events. It is useful when clients want always to be
     * able to recover a disconnected watcher from a recent known revision.
     * etcdsever can decide how long it should send a notification based on current load.
     * </pre>
     */
    public boolean getProgressNotify() {
      return progressNotify_;
    }
    /**
     * <code>optional bool progress_notify = 4;</code>
     *
     * <pre>
     * if progress_notify is set, etcd server sends WatchResponse with empty events to the
     * created watcher when there are no recent events. It is useful when clients want always to be
     * able to recover a disconnected watcher from a recent known revision.
     * etcdsever can decide how long it should send a notification based on current load.
     * </pre>
     */
    public Builder setProgressNotify(boolean value) {
      
      progressNotify_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bool progress_notify = 4;</code>
     *
     * <pre>
     * if progress_notify is set, etcd server sends WatchResponse with empty events to the
     * created watcher when there are no recent events. It is useful when clients want always to be
     * able to recover a disconnected watcher from a recent known revision.
     * etcdsever can decide how long it should send a notification based on current load.
     * </pre>
     */
    public Builder clearProgressNotify() {
      
      progressNotify_ = false;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:etcd4j.WatchCreateRequest)
  }

  // @@protoc_insertion_point(class_scope:etcd4j.WatchCreateRequest)
  private static final com.xqbase.etcd4j.WatchCreateRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.xqbase.etcd4j.WatchCreateRequest();
  }

  public static com.xqbase.etcd4j.WatchCreateRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<WatchCreateRequest>
      PARSER = new com.google.protobuf.AbstractParser<WatchCreateRequest>() {
    public WatchCreateRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      try {
        return new WatchCreateRequest(input, extensionRegistry);
      } catch (RuntimeException e) {
        if (e.getCause() instanceof
            com.google.protobuf.InvalidProtocolBufferException) {
          throw (com.google.protobuf.InvalidProtocolBufferException)
              e.getCause();
        }
        throw e;
      }
    }
  };

  public static com.google.protobuf.Parser<WatchCreateRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<WatchCreateRequest> getParserForType() {
    return PARSER;
  }

  public com.xqbase.etcd4j.WatchCreateRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

