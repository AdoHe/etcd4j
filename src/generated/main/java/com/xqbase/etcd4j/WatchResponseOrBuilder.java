// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: etcd.proto

package com.xqbase.etcd4j;

public interface WatchResponseOrBuilder extends
    // @@protoc_insertion_point(interface_extends:etcd4j.WatchResponse)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>optional .etcd4j.ResponseHeader header = 1;</code>
   */
  boolean hasHeader();
  /**
   * <code>optional .etcd4j.ResponseHeader header = 1;</code>
   */
  com.xqbase.etcd4j.ResponseHeader getHeader();
  /**
   * <code>optional .etcd4j.ResponseHeader header = 1;</code>
   */
  com.xqbase.etcd4j.ResponseHeaderOrBuilder getHeaderOrBuilder();

  /**
   * <code>optional int64 watch_id = 2;</code>
   *
   * <pre>
   * watch_id is the ID of the watching the response sent to.
   * </pre>
   */
  long getWatchId();

  /**
   * <code>optional bool created = 3;</code>
   *
   * <pre>
   * If the response is for a create watch request, created is set to true.
   * Client should record the watch_id and prepare for receiving events for
   * that watching from the same stream.
   * All events sent to the created watching will attach with the same watch_id.
   * </pre>
   */
  boolean getCreated();

  /**
   * <code>optional bool canceled = 4;</code>
   *
   * <pre>
   * If the response is for a cancel watch request, cancel is set to true.
   * No further events will be sent to the canceled watching.
   * </pre>
   */
  boolean getCanceled();

  /**
   * <code>optional int64 compact_revision = 5;</code>
   *
   * <pre>
   * CompactRevision is set to the minimum index if a watching tries to watch
   * at a compacted index.
   * This happens when creating a watching at a compacted revision or the watching cannot
   * catch up with the progress of the KV.
   * Client should treat the watching as canceled and should not try to create any
   * watching with same start_revision again.
   * </pre>
   */
  long getCompactRevision();

  /**
   * <code>repeated .etcd4j.Event events = 11;</code>
   */
  java.util.List<com.xqbase.etcd4j.Event> 
      getEventsList();
  /**
   * <code>repeated .etcd4j.Event events = 11;</code>
   */
  com.xqbase.etcd4j.Event getEvents(int index);
  /**
   * <code>repeated .etcd4j.Event events = 11;</code>
   */
  int getEventsCount();
  /**
   * <code>repeated .etcd4j.Event events = 11;</code>
   */
  java.util.List<? extends com.xqbase.etcd4j.EventOrBuilder> 
      getEventsOrBuilderList();
  /**
   * <code>repeated .etcd4j.Event events = 11;</code>
   */
  com.xqbase.etcd4j.EventOrBuilder getEventsOrBuilder(
      int index);
}
