// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: etcd.proto

package com.xqbase.etcd4j;

public interface RangeRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:etcd4j.RangeRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>optional bytes key = 1;</code>
   *
   * <pre>
   * if the range_end is not given, the request returns the key.
   * </pre>
   */
  com.google.protobuf.ByteString getKey();

  /**
   * <code>optional bytes range_end = 2;</code>
   *
   * <pre>
   * if the range_end is given, it gets the keys in range [key, range_end)
   * if range_end is nonempty, otherwise it returns all keys &gt;= key.
   * </pre>
   */
  com.google.protobuf.ByteString getRangeEnd();

  /**
   * <code>optional int64 limit = 3;</code>
   *
   * <pre>
   * limit the number of keys returned.
   * </pre>
   */
  long getLimit();

  /**
   * <code>optional int64 revision = 4;</code>
   *
   * <pre>
   * range over the store at the given revision.
   * if revision is less or equal to zero, range over the newest store.
   * if the revision has been compacted, ErrCompaction will be returned in
   * response.
   * </pre>
   */
  long getRevision();

  /**
   * <code>optional .etcd4j.RangeRequest.SortOrder sort_order = 5;</code>
   *
   * <pre>
   * sort_order is the requested order for returned the results
   * </pre>
   */
  int getSortOrderValue();
  /**
   * <code>optional .etcd4j.RangeRequest.SortOrder sort_order = 5;</code>
   *
   * <pre>
   * sort_order is the requested order for returned the results
   * </pre>
   */
  com.xqbase.etcd4j.RangeRequest.SortOrder getSortOrder();

  /**
   * <code>optional .etcd4j.RangeRequest.SortTarget sort_target = 6;</code>
   *
   * <pre>
   * sort_target is the kv field to use for sorting
   * </pre>
   */
  int getSortTargetValue();
  /**
   * <code>optional .etcd4j.RangeRequest.SortTarget sort_target = 6;</code>
   *
   * <pre>
   * sort_target is the kv field to use for sorting
   * </pre>
   */
  com.xqbase.etcd4j.RangeRequest.SortTarget getSortTarget();

  /**
   * <code>optional bool serializable = 7;</code>
   *
   * <pre>
   * range request is linearizable by default. Linearizable requests has a higher
   * latency and lower throughput than serializable request.
   * To reduce latency, serializable can be set. If serializable is set, range request
   * will be serializable, but not linearizable with other requests.
   * Serializable range can be served locally without waiting for other nodes in the cluster.
   * </pre>
   */
  boolean getSerializable();
}
