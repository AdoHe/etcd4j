// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: etcd.proto

package com.xqbase.etcd4j;

public interface WatchCreateRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:etcd4j.WatchCreateRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>optional bytes key = 1;</code>
   *
   * <pre>
   * the key to be watched
   * </pre>
   */
  com.google.protobuf.ByteString getKey();

  /**
   * <code>optional bytes range_end = 2;</code>
   *
   * <pre>
   * if the range_end is given, keys in [key, range_end) are watched
   * NOTE: only range_end == prefixEnd(key) is accepted now
   * </pre>
   */
  com.google.protobuf.ByteString getRangeEnd();

  /**
   * <code>optional int64 start_revision = 3;</code>
   *
   * <pre>
   * start_revision is an optional revision (including) to watch from. No start_revision is "now".
   * </pre>
   */
  long getStartRevision();

  /**
   * <code>optional bool progress_notify = 4;</code>
   *
   * <pre>
   * if progress_notify is set, etcd server sends WatchResponse with empty events to the
   * created watcher when there are no recent events. It is useful when clients want always to be
   * able to recover a disconnected watcher from a recent known revision.
   * etcdsever can decide how long it should send a notification based on current load.
   * </pre>
   */
  boolean getProgressNotify();
}
